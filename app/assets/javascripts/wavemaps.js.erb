// This is used to set up the routes. it can be deleted
<% environment.context_class.instance_eval {include Rails.application.routes.url_helpers } %>

// Create image loader class
// Create Base Wave maps class
// Create Button class?
// Create tabs
// Create image animation in kinetic js

var Times = (function() {
  Times.name = "Times";

  function Times(options) {
    this.id = options.id;
    var timezone = options.timezone;
    var map = options.map;
    var maptype = options.maptype;

    var url = "";
    var params = {timezone: timezone, map: map};
    switch (maptype) {
      case "wavemaps":
      case "periodmaps":
        url = "<%= data_wave_map_times_path :format => :xml %>";
        params.maptype = options.maptype;
        break;
      case "windmaps":
        url = "<%= data_wind_map_times_path :format => :xml %>";
        break;
      case "pressurewindmap":
        url = "<%= data_pressure_map_times_path :format => :xml %>";
        params.maptype = options.maptype;
        break;
    }
    $.get(url, params, $.proxy(this.storeMapTimes, this));
  }

  Times.prototype.storeMapTimes = function(data) {
    var times = [];
    xml = $(data);
    xml.find("time").each(function(index, element) {
      $element = $(element);
      var hour = $element.attr("hour");
      if (hour < 10) {
        var value = "0" + hour;
      } else {
        var value = hour;
      }
      times.push({hour: hour, hourString: value, stamp: $element.attr("stamp")});
    });
    this.times = times;
    $("#" + this.id).trigger("timesLoaded", [times]);
  };

  return Times;
})();

var Images= (function() {
  Images.name = "Images";

  // constructor
  function Images(options) {
    this.id = options.id;
    this.imgurls = options.images;
    this.images = [];
    this.count = 0;

    // Fetch one image for testing
    for (var i = 0; i < this.imgurls.length; i++) {
      var imgurl = this.imgurls[i];
      // Add cachebuster
      imgurl += ("?_=") + (new Date()).getTime();
      $("<img/>")
          .load({id: i}, $.proxy(this.imageLoadHandler, this))
          .error({id: i}, $.proxy(this.imageLoadErrorHandler, this))
          .attr("src", imgurl)
    }
  }

  Images.prototype.imageLoadHandler = function(evt) {
    this.count++;
    evt.data.count = this.count;
    console.log("image loaded correctly, id:", evt.data.id);
    this.images[evt.data.id] = evt.target;

    $("#" + this.id).trigger("images:success", [evt.data, evt.target]);
    if (this.count == this.imgurls.length) {
      console.log(this.images);
      $("#" + this.id).trigger("images:allLoaded");
    }
    // debugging code
    //$("#wavemaps").append(evt.target); 
  }

  Images.prototype.imageLoadErrorHandler = function(evt) {
    this.count++;
    console.log("error loading image, id:", evt.data.id);

    $("#" + this.id).trigger("images:error", [evt.data, evt.target]);
    if (this.count == this.imgurls.length) {
      $("#" + this.id).trigger("images:allLoaded");
    }
  }

  return Images;
})();

var TimeBar = (function() {
  TimeBar.name = "TimeBar";

  function TimeBar(options) {
    this.layer = options.layer;
    this.times = options.times;

    this.drawTimeBar();
  }

  TimeBar.prototype.drawTimeBar = function() {
    var height = 0;
    if (this.times.length > 31) {
      height = 392;
    } else {
      height = (this.times.length * 11) + 7;
    }
    console.log("height", height);
    var rect = new Kinetic.Rect({
      x: 512.5,
      y: -0.5,
      width: 29,
      height: height,
      fill: "rgba(255, 255, 255, 0.6)",
      stroke: "#177496",
      strokeWidth: 1
    });
    this.layer.add(rect);

    var timeNavGroup = new Kinetic.Group({
      x: 512,
      y: 5
    });
    // Draw times buttons
    for (var i = 0; i < this.times.length; i++) {
      var text = new Kinetic.Text({
        text: this.times[i].hourString,
        textFill: "#000000",
        align: "right",
        width: 23,
        x: 0,
        y: i * 11,
        fontSize: 8,
        fontFamily: "Arial",
        fontStyle: "bold"
      });
      timeNavGroup.add(text);
    }

    // Yellow highlight box
    rect = new Kinetic.Rect({
      x: 1,
      y: -2,
      width: 28,
      height: 10,
      fill: "rgba(254, 254, 0, 0.6)"
    });
    timeNavGroup.add(rect);
    rect.setZIndex(0);

    this.layer.add(timeNavGroup);
    this.layer.draw();
    
  };

  return TimeBar;
})();

var ProgressBar = (function() {
  ProgressBar.name = "ProgressBar";

  function ProgressBar(options) {
    this.layer = options.layer;
    this.id = options.id;
    this.numberOfImages = options.numberOfImages;
    this.imageLoader = options.imageLoader;

    this.drawInitial();

    $("#" + this.id).on("images:success", $.proxy(this.update, this));
  }

  ProgressBar.prototype.update = function(event, data, target) {
    var count = data.count;

    var lengthRatio = count / this.numberOfImages;

    var basePoints = this.baseLine.getPoints();
    var maxLength = basePoints[1].x - basePoints[0].x;

    var progressPoints = this.progressLine.getPoints();
    var progressX = progressPoints[0].x;

    var length = maxLength * lengthRatio;

    progressPoints[1].x = progressX + length;

    this.updateText.setText("MAP " + count + " OF " + this.numberOfImages + " LOADED");

    this.layer.draw();
  };

  ProgressBar.prototype.drawInitial = function() {
    this.barGroup = new Kinetic.Group();
    this.baseLine = new Kinetic.Line({
      points: [401.5, 33.5, 496.5, 33.5],
      strokeWidth: 5,
      stroke: "#000",
      lineCap: 'round',
    });
    this.barGroup.add(this.baseLine);

    this.progressLine = new Kinetic.Line({
      points: [401.5, 33.5, 402.5, 33.5],
      strokeWidth: 3,
      stroke: "#00FF33",
      lineCap: 'round',
    });
    this.barGroup.add(this.progressLine);

    this.updateText = new Kinetic.Text({
      x: 391,
      y: 41,
      text: "MAP 0 OF " + this.numberOfImages + " LOADED",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold",
      width: 120,
      align: "center",
    });
    this.barGroup.add(this.updateText);
    this.layer.add(this.barGroup);
    this.layer.draw();
  };

  ProgressBar.prototype.hide = function() {
    this.barGroup.hide();
    this.layer.draw();
  };

  return ProgressBar;
})();

var PlayControls = (function() {
  PlayControls.name = "PlayControls";

  function PlayControls(options) {
    this.id = options.id;
    this.layer = options.layer;

    this.drawInitial();
  }

  PlayControls.prototype.drawInitial = function() {
    
  };

  return PlayControls;
})();

var WaveMap = (function() {
  WaveMap.name = "WaveMap";

  // constructor
  function WaveMap(options) {
    this.id = options.id;
    this.title = options.title;
    this.mapImages = options.map_images;
    this.stage = new Kinetic.Stage({container: options.id, width: 541, height: 391});

    this.mapLayer = new Kinetic.Layer();
    this.infoLayer = new Kinetic.Layer();

    this.stage.add(this.mapLayer);
    this.stage.add(this.infoLayer);

    var times = new Times({
      id: this.id,
      timezone: options.timezone,
      map: options.map,
      maptype: options.maptype
    });

    $("#" + this.id).on("timesLoaded", $.proxy(this.handleLoadedTimes, this));

    this.drawInfoLayer();
  }

  WaveMap.prototype.drawInfoLayer = function() {
    // Title background Rectangle
    var rect = new Kinetic.Rect({
      x: 0,
      y: 0,
      fill: "rgba(255, 255, 255, 0.6)",
      width:512,
      height: 27,
    });
    this.infoLayer.add(rect);

    var text = new Kinetic.Text({
      x: 8,
      y: 8,
      text: this.title,
      textFill: "#0E4A74",
      fontSize: 12,
      fontFamily: "Arial",
      fontStyle: 'italic bold',
    });
    this.infoLayer.add(text);

    this.infoLayer.draw();
  };

  WaveMap.prototype.handleLoadedTimes = function(event, times) {
    this.timesBar = new TimeBar({layer: this.infoLayer, times: times});

    var imgurls = [];
    for (var i = 0; i < times.length; i++) {
      var number = times[i].hourString;
      imgurls.push("http://www.swellinfo.com/imgs" + this.mapImages + number + ".png");
    }
    $("#" + this.id).on("images:success", $.proxy(this.loadMap, this));
    $("#" + this.id).on("images:allLoaded", $.proxy(this.showControlButtons, this));
    this.deepWaterWaves = new Images({
      id: this.id,
      images: imgurls
    });

    this.progressBar = new ProgressBar({
      id: this.id,
      layer: this.infoLayer,
      imageLoader: this.deepWaterWaves,
      numberOfImages: imgurls.length
    });
  };

  WaveMap.prototype.loadMap = function(event, data, target) {
    if (data.id == 0) {
      var image = new Kinetic.Image({
        id: "mapimage",
        image: target,
        x: 0,
        y: 0
      });
      image.on("click", $.proxy(this.animateMap, this));
      this.mapLayer.add(image);
      this.mapLayer.draw();
    }
  };

  WaveMap.prototype.showControlButtons = function() {
    this.progressBar.hide();
  };

  WaveMap.prototype.animateMap = function() {
    var image = this.mapLayer.get("#mapimage")[0];

    var fps = 4;
    var frameNum = 0;
    var animImages = this.deepWaterWaves.images;
    var anim = new Kinetic.Animation(function(frame) {
      frameNum = Math.floor(frame.time / (1000 / fps)) % animImages.length;
      image.setImage(animImages[frameNum]);
    }, this.mapLayer);

    anim.start();
  };

  return WaveMap;
})();

$(function() {
  var canvas2DSupported = !!window.CanvasRenderingContext2D;
  if ($("#waveheights").length > 0 && canvas2DSupported) {
    new WaveMap({
      id: "waveheights",
      title: "DEEP WATER WAVES",
      map_images: "/wave_maps/wna_midat/wna_midat",
      timezone: "ET",
      map: "wna_midat",
      maptype: "wavemaps"
    });
    new WaveMap({
      id: "waveperiods",
      title: "Mean Wave Periods",
      map_images: "/pergraphs/wna_ec/wna_ec_per",
      timezone: "ET",
      map: "wna_ec",
      maptype: "periodmaps"
    });
    new WaveMap({
      id: "nearshorewind",
      title: "Near Shore Winds",
      map_images: "/nearshorewind/wna_nj_wind/wna_nj_wind",
      timezone: "ET",
      map: "wna_nj",
      maptype: "windmaps"
    });
    new WaveMap({
      id: "pressurewind",
      title: "PRESSURE / WIND MAP",
      map_images: "/pressure/wna_ec_pressure/wna_ec_pressure",
      timezone: "ET",
      map: "wna_ec",
      maptype: "pressurewindmap"
    });
  }
});
