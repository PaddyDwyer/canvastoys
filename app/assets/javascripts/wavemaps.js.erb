// This is used to set up the routes. it can be deleted
<% environment.context_class.instance_eval {include Rails.application.routes.url_helpers } %>

// Add titles for hurricanes
// Create tabs
// Create points and info box

var MouseHandler = {
  mouseenter: function() {
    document.body.style.cursor = "pointer";
  },

  mouseleave: function() {
    document.body.style.cursor = "default";
  }
}

/**
 * The options object can have the following members:
 * id: Used if you want to trigger the images loaded event. It triggers the event on 
 * the object with the provided id.
 * images: Array of images urls that you want the images object to load.
 */
var Images= (function() {
  Images.name = "Images";

  // constructor
  function Images(options) {
    this.triggerElement = !options.id ? $(document) : $("#" + options.id);
    this.imgurls = options.images;
    this.images = [];
    this.count = 0;
    this.collection = options.collection;
    this.cache = options.cache || false;

    // Fetch one image for testing
    for (var i = 0; i < this.imgurls.length; i++) {
      var imgurl = this.imgurls[i];
      // Add cachebuster
      if (!this.cache) {
        imgurl += ("?_=") + (new Date()).getTime();
      }
      $("<img/>")
          .one("load", {id: i, url: this.imgurls[i]}, $.proxy(this.imageLoadHandler, this))
          .error({id: i}, $.proxy(this.imageLoadErrorHandler, this))
          .attr("src", imgurl)
    }
  }

  Images.prototype.imageLoadHandler = function(evt) {
    this.count++;
    evt.data.count = this.count;
    this.images[evt.data.id] = evt.target;

    this.triggerElement.trigger(this.collection + ":images:success", [evt.data, evt.target]);
    if (this.count == this.imgurls.length) {
      this.fullyLoaded = true;
      this.triggerElement.trigger(this.collection + ":images:allLoaded");
    }
  }

  Images.prototype.imageLoadErrorHandler = function(evt) {
    this.count++;

    this.triggerElement.trigger(this.collection + ":images:error", [evt.data, evt.target]);
    if (this.count == this.imgurls.length) {
      this.fullyLoaded = true;
      this.triggerElement.trigger(this.collection + ":images:allLoaded");
    }
  }

  return Images;
})();

var Times = (function() {
  Times.name = "Times";

  function Times(options) {
    this.id = options.id;
    var timezone = options.timezone;
    var map = options.map;
    var maptype = options.maptype;

    var url = "";
    var params = {timezone: timezone, map: map};
    switch (maptype) {
      case "wavemaps":
      case "periodmaps":
        url = "<%= data_wave_map_times_path :format => :xml %>";
        params.maptype = options.maptype;
        break;
      case "windmaps":
        url = "<%= data_wind_map_times_path :format => :xml %>";
        break;
      case "pressurewindmap":
        url = "<%= data_pressure_map_times_path :format => :xml %>";
        params.maptype = options.maptype;
        break;
    }
    $.get(url, params, $.proxy(this.storeMapTimes, this));
  }

  Times.prototype.storeMapTimes = function(data) {
    var times = [];
    xml = $(data);
    xml.find("time").each(function(index, element) {
      $element = $(element);
      var hour = $element.attr("hour");
      if (hour < 10) {
        var value = "0" + hour;
      } else {
        var value = hour;
      }
      times.push({hour: hour, hourString: value, stamp: $element.attr("stamp")});
    });
    this.times = times;
    $("#" + this.id).trigger("timesLoaded", [times]);
  };

  return Times;
})();

var Forecast = (function() {
  Forecast.name = "Forecast";

  function Forecast(options) {
    this.id = options.id;
    var map = options.map;
    
    var url = "<%= data_forecast_xy_path :format => :xml %>";
    $.get(url, {map: map}, $.proxy(this.storeForecast, this));
  }

  Forecast.prototype.storeForecast = function(data) {
    var forecast = [];
    var xml = $(data);
    var imageUrlSet = {};
    xml.find("forecast").each(function() {
      var element = $(this);
      var data = {};
      data.id = element.attr("id");
      data.xcoord = element.attr("xcoord");
      data.ycoord = element.attr("ycoord");
      data.xbox = element.attr("xbox");
      data.ybox = element.attr("ybox");
      data.brk = element.attr("brk");
      data.st = element.attr("st");
      data.surf_am = element.attr("surf_am");
      data.surf_pm = element.attr("surf_pm");
      data.surf_txt = element.attr("surf_txt");
      data.cond_txt = element.attr("cond_txt");
      data.url = element.attr("url");
      data.surf_day = element.attr("surf_day");
      forecast.push(data);
      imageUrlSet[data.surf_am] = true;
      imageUrlSet[data.surf_pm] = true;
    });
    this.dataPoints = forecast;

    /*
    var imageUrls = [];
    for (var url in imageUrlSet) {
      if (imageUrlSet.hasOwnProperty(url)) {
        imageUrls.push("http://www.swellinfo.com/images/icons/" + url);
      }
    }

    this.surfImages = new Images({
      id: this.id,
      images: imageUrls,
      collection: "surfImages",
      cache: true});

    $("#" + this.id).on("surfImages:images:allLoaded.wavemaps", $.proxy(this.imagesLoaded, this));
    */
    $("#" + this.id).trigger("forecastLoaded", [this.dataPoints]);
  };

  Forecast.prototype.imagesLoaded = function() {
    var images = this.surfImages.images;

    // convert images array to an object keyed off names
    var imagesObject = {};
    for (var i = 0; i < images.length; i++) {
      var image = images[i];
      var src = image.src;
      var imgName = src.substr(38);
      imagesObject[imgName] = image;
    }

    for (var i = 0; i < this.dataPoints.length; i++) {
      this.dataPoints[i].surf_am = imagesObject[this.dataPoints[i].surf_am];
      this.dataPoints[i].surf_pm = imagesObject[this.dataPoints[i].surf_pm];
    }

    $("#" + this.id).trigger("forecastLoaded", [this.dataPoints]);
  };

  return Forecast;
})();

var ForecastPoints = (function() {
  ForecastPoints.name = "ForecastPoints";

  var pointImages = new Images({
    images: ["<%= asset_path('green_star_wavemaps.png') %>"],
    collection: "forecastPoints"
  });

  function ForecastPoints(options) {
    this.id = options.id;
    this.layer = options.layer;
    this.data = options.forecastPoints;
    this.loc = options.loc;

    if (!pointImages.fullyLoaded) {
      $(document).on("forecastPoints:images:allLoaded.wavemaps", $.proxy(this.drawInitial, this));
    } else {
      this.drawInitial();
    }

  }

  ForecastPoints.prototype.drawInitial = function() {
    var shape;
    for (var i = 0; i < this.data.length; i++) {
      if (this.data[i].url.indexOf(this.loc) > -1) {
        shape = new Kinetic.Image({
          x: this.data[i].xcoord,
          y: this.data[i].ycoord,
          image: pointImages.images[0]
        });
        shape.setOffset(shape.getWidth() / 2, shape.getHeight() / 2);
      } else {
        shape = new Kinetic.Circle({
          x: this.data[i].xcoord,
          y: this.data[i].ycoord,
          radius: 4,
          fill: "#990000"
        });
      }
      shape.on("click.wavemaps tap.wavemaps", this.createPointClickFunction(this.data[i]));
      shape.on("mouseenter.wavemaps", MouseHandler.mouseenter);
      shape.on("mouseleave.wavemaps", MouseHandler.mouseleave);
      this.layer.add(shape);
    }

    this.drawInfoBox();

    this.layer.draw();
  };

  ForecastPoints.prototype.createPointClickFunction = function(dataPoint) {
    var _this = this;
    return function() {
      _this.url = dataPoint.url;
      _this.showInfoBox(dataPoint);
    }
  };

  ForecastPoints.prototype.showInfoBox = function(dataPoint) {
    this.infoBox.show();
    this.infoBox.css("left", dataPoint.xbox - 102);
    this.infoBox.css("top", dataPoint.ybox - 77);

    this.name.html(dataPoint.brk + ", " + dataPoint.st);
    this.name.attr("href", dataPoint.url);
    this.surf_day.html(dataPoint.surf_day + "'s Forecast");
    this.surf_am.attr("src", "http://www.swellinfo.com/images/icons/" + dataPoint.surf_am);
    this.surf_pm.attr("src", "http://www.swellinfo.com/images/icons/" + dataPoint.surf_pm);
    this.surf_txt.html(dataPoint.surf_txt);
    this.cond_txt.html(dataPoint.cond_txt);
    this.url_btn.html("Click for " + dataPoint.brk + " Forecast page");
    this.url_btn.attr("href", dataPoint.url);
  };

  ForecastPoints.prototype.changeToForecastPage = function() {
    window.location = this.url;
  };

  ForecastPoints.prototype.drawInfoBox = function() {
    this.infoBox = $("#" + this.id + " .infobox");
    this.infoBox.hide();

    this.name = this.infoBox.find(".name a");
    this.surf_day = this.infoBox.find(".surf_day span");
    this.surf_am = this.infoBox.find(".surf_am");
    this.surf_pm = this.infoBox.find(".surf_pm");
    this.surf_txt = this.infoBox.find(".surf_txt");
    this.cond_txt = this.infoBox.find(".cond_txt");
    this.url_btn = this.infoBox.find(".url_btn a");
    var infoBox = this.infoBox;
    this.infoBox.find(".closebutton").on("click", function(event) {
      infoBox.hide();
    });
    /*
    this.infoBoxGroup = new Kinetic.Group({
    });

    // background rectangle
    var rect = new Kinetic.Rect({
      width: 201,
      height: 191,
      fill: "#FFFFFF",
      stroke: "#CCCCCC",
      strokeWidth: 1,
      cornerRadius: 6
    });
    this.infoBoxGroup.add(rect);

    this.name = new Kinetic.Text({
      x: (rect.getWidth() / 2) - 75.5,
      y: 8.5, 
      width: 150,
      textFill: "#0000B4",
      fontFamily: "Verdana",
      fontSize: 9,
      align: "center"
    });
    this.name.on("click.wavemaps tap.wavemaps", $.proxy(this.changeToForecastPage, this));
    this.name.on("mouseenter.wavemaps", MouseHandler.mouseenter);
    this.name.on("mouseleave.wavemaps", MouseHandler.mouseleave);
    this.infoBoxGroup.add(this.name);

    var closeButton = new Kinetic.Text({
      x: 189.5,
      y: 6,
      text: "x",
      textFill: "#990000",
      fontSize: 9,
      fontFamily: "Arial Black"
    });
    closeButton.on("click.wavemaps tap.wavemaps", $.proxy(this.closeInfoBox, this));
    closeButton.on("mouseenter.wavemaps", MouseHandler.mouseenter);
    closeButton.on("mouseleave.wavemaps", MouseHandler.mouseleave);
    this.infoBoxGroup.add(closeButton);

    this.surf_day = new Kinetic.Text({
      x: 7.5,
      y: 34.5,
      width: 116,
      textFill: "#000000",
      fontSize: 8,
      fontFamily: "Arial"
    });
    this.infoBoxGroup.add(this.surf_day);

    this.surf_am = new Kinetic.Image({
      x: 134.5,
      y: 25.5,
      width: 19,
      height: 20
    });
    this.infoBoxGroup.add(this.surf_am);

    this.surf_pm = new Kinetic.Image({
      x: 169.5,
      y: 25.5,
      width: 19,
      height: 20
    });
    this.infoBoxGroup.add(this.surf_pm);

    var text = new Kinetic.Text({
      x: 7,
      y: 51,
      text: "Surf:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    this.infoBoxGroup.add(text);

    this.surf_txt = new Kinetic.Text({
      x: 7.5,
      y: 66.5,
      width: 194,
      height: 44,
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      lineHeight: 1.8
    });
    this.infoBoxGroup.add(this.surf_txt);

    text = new Kinetic.Text({
      x: 7,
      y: 112,
      text: "Conditions:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    this.infoBoxGroup.add(text);

    this.cond_txt = new Kinetic.Text({
      x: 7.5,
      y: 127.5,
      width: 194,
      height: 44,
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      lineHeight: 1.8
    });
    this.infoBoxGroup.add(this.cond_txt);

    this.url_btn = new Kinetic.Text({
      x: 7.5,
      y: 179.5,
      width: 194,
      textFill: "#0000B4",
      fontFamily: "Arial",
      fontSize: 8
    });
    this.url_btn.on("click.wavemaps tap.wavemaps", $.proxy(this.changeToForecastPage, this));
    this.url_btn.on("mouseenter.wavemaps", MouseHandler.mouseenter);
    this.url_btn.on("mouseleave.wavemaps", MouseHandler.mouseleave);
    this.infoBoxGroup.add(this.url_btn);
    this.infoBoxGroup.hide();

    this.layer.add(this.infoBoxGroup);
    */
  };

  ForecastPoints.prototype.closeInfoBox = function() {
    this.infoBoxGroup.hide();
    this.layer.draw();
  };

  return ForecastPoints;
})();

var BuoyData = (function() {
  BuoyData.name = "BuoyData";

  function BuoyData(options) {
    this.id = options.id;
    var map = options.map;

    var url = "<%= data_buoy_data_path :format => :xml %>";
    $.get(url, {map: map + "buoys"}, $.proxy(this.storeBuoyData, this));
  }

  BuoyData.prototype.storeBuoyData = function(data) {
    var buoyData = [];
    var xml = $(data);
    xml.find("buoy").each(function() {
      var element = $(this);
      var data = {};
      data.id = element.attr("id");
      data.type = element.attr("type");
      data.time = element.attr("time");
      data.wave_ht = element.attr("wave_ht");
      data.wave_per = element.attr("wave_per");
      data.wave_dir = element.attr("wave_dir");
      data.swell_ht = element.attr("swell_ht");
      data.swell_per = element.attr("swell_per");
      data.swell_dir = element.attr("swell_dir");
      data.wind_dir = element.attr("wind_dir");
      data.wind_speed = element.attr("wind_speed");
      data.wind_gusts = element.attr("wind_gusts");
      data.air_temp = element.attr("air_temp");
      data.dew_point = element.attr("dew_point");
      data.water_temp = element.attr("water_temp");
      data.xcoord = element.attr("xcoord");
      data.ycoord = element.attr("ycoord");
      data.xbox = parseInt(element.attr("xbox"), 10);
      data.ybox = parseInt(element.attr("ybox"), 10);
      data.current = element.attr("current");
      if (data.current == "yes") {
        buoyData.push(data);
      }
    });
    this.dataPoints = buoyData;

    $("#" + this.id).trigger("buoyDataLoaded", [this.dataPoints]);
  };

  return BuoyData;
})();

var BuoyDataPoints = (function() {
  BuoyDataPoints.name = "BuoyDataPoints";

  function BuoyDataPoints(options) {
    this.id = options.id;
    this.layer = options.layer;
    this.data = options.buoyDataPoints;
    this.map = options.map;
    this.defaultBuoy = options.defaultBuoy;

    this.drawInitial();
  }

  BuoyDataPoints.prototype.drawInitial = function() {
    var dataPoint, group, rect, circle, bigDataBox, smDataBox, clickHandler, mouseOverHandler;

    // Position the big data box
    bigDataBox = new Kinetic.Group({
      draggable: true,
      dragBoundFunc: function(pos) {
        var newY;
        if (pos.y < 27) {
          newY = 27;
        } else if (pos.y > (390 - 144)) {
          newY = 390 - 144;
        } else {
          newY = pos.y;
        }
        var newX;
        if (pos.x < 0) {
          newX = 0;
        } else if (pos.x > (540 - 179)) {
          newX = 540 - 179;
        } else {
          newX = pos.x;
        }
        return {
          x: newX,
          y: newY
        }
      }
    });
    switch (this.map) {
      case 'wna_ne':
        bigDataBox.setPosition(25, 34);
        break;
      case 'wna_midat':
        bigDataBox.setPosition(200, 165);
        break;
      case 'wna_se':
        bigDataBox.setPosition(350, 235);
        break;
      case 'wna_efl':
        bigDataBox.setPosition(350, 35);
        break;
      case 'wna_wfl':
        bigDataBox.setPosition(5, 134);
        break;
      case 'wna_tx':
        bigDataBox.setPosition(260, 240);
        break;
      case 'enp_nw':
        bigDataBox.setPosition(41, 132);
        break;
      case 'enp_calnorth':
        bigDataBox.setPosition(94, 174);
        break;
      case 'enp_socal':
        bigDataBox.setPosition(361, 29);
        break;
      case 'enp_hawaii':
        bigDataBox.setPosition(355, 33);
        break;
      case 'wna_caribnorth':
        bigDataBox.setPosition(355, 33);
        break;
      case 'wna_caribsouth':
        bigDataBox.setPosition(240, 240);
        break;
      case 'wna_gulf':
        bigDataBox.setPosition(250, 135);
        break;
      case 'enp_mex':
        bigDataBox.setPosition(100, 200);
        break;
      case 'enp_cenam':
        bigDataBox.setPosition(60, 180);
        break;
      default:
        bigDataBox.setPosition(25, 34);
        break;
    }
    this.createBigDataBox(bigDataBox);
    this.layer.add(bigDataBox);

    // Create the Data Points
    for (var i = 0; i < this.data.length; i++) {
      clickHandler = null;
      dataPoint = this.data[i];
      if (dataPoint.id == this.defaultBuoy) {
        this.updateDataBox(dataPoint);
      }
      group = new Kinetic.Group({
        x: dataPoint.xcoord,
        y: dataPoint.ycoord
      });
      if (dataPoint.type == "ndbc" || dataPoint.type == "ndbc2") {
        if (dataPoint.type == "ndbc2") {
          rect = new Kinetic.Rect({
            width: 8,
            height: 8,
            fill: "#125780"
          });
          group.add(rect);
          rect = new Kinetic.Rect({
            x: 2,
            y: 2,
            width: 4,
            height: 4,
            fill: "#F6F43A"
          });
          group.add(rect);
        } else {
          rect = new Kinetic.Rect({
            width: 8,
            height: 8,
            fill: "#F6F43A"
          });
          group.add(rect);
        }

        smDataBox = this.createSmallDataBox(dataPoint);
        group.add(smDataBox);
        clickHandler = this.createClickHandler(dataPoint);
      } else if (dataPoint.type == "buoycast") {
        rect = new Kinetic.Rect({
          width: 8,
          height: 8,
          fill: "#125780"
        });
        group.add(rect);
      } else if (dataPoint.type == "inland") {
        circle = new Kinetic.Circle({
          radius: 4,
          fill: "#00FF00"
        });
        group.add(circle);
      } else if (dataPoint.type == "coastal") {
        circle = new Kinetic.Circle({
          radius: 4,
          fill: "#A22B25"
        });
        group.add(circle);
        clickHandler = this.createClickHandler(dataPoint);
      }
      if(clickHandler) {
        group.on("click.wavemaps", clickHandler);
      }
      mouseOverHandler = this.createMouseOverHandler(dataPoint);
      group.on("mouseenter.wavemaps", mouseOverHandler);
      group.on("tap.wavemaps", this.createTapHandler(dataPoint, mouseOverHandler, clickHandler));
      bigDataBox.setZIndex(1000);
      this.layer.add(group);
    }

    this.layer.draw();
  };

  BuoyDataPoints.prototype.createClickHandler = function(dataPoint) {
    return function() {
      var url = "http://ndbc.noaa.gov/station_page.php?station=" + dataPoint.id;
      window.open(url, "_blank");
    }
  };

  BuoyDataPoints.prototype.createMouseOverHandler = function(dataPoint) {
    var _this = this;
    return function() {
      _this.updateDataBox(dataPoint);
    }
  };

  BuoyDataPoints.prototype.createTapHandler = function(dataPoint, mouseOverHandler, clickHandler) {
    var _this = this;
    return function() {
      if (_this.selected == dataPoint.id && typeof clickHandler == 'function') {
        clickHandler();
      } else {
        mouseOverHandler();
        _this.selected = dataPoint.id;
      }
    }
  };

  BuoyDataPoints.prototype.createBigDataBox = function(group) {
    var rect = new Kinetic.Rect({
      x: 0.5,
      y: 0.5,
      width: 179,
      height: 144,
      fill: "rgba(256, 256, 256, 0.8)",
      stroke: "#000000",
      strokeWidth: 1
    });
    group.add(rect);

    var line = new Kinetic.Line({
      points: [0.5, 37.5, 179.5, 37.5],
      strokeWidth: 1,
      stroke: "#000000"
    });
    group.add(line);

    var text = new Kinetic.Text({
      x: 5.5,
      y: 6.5,
      text: "Station ID:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 10
    });
    group.add(text);

    this.station_id = new Kinetic.Text({
      x: 68.5,
      y: 6.5,
      textFill: "#990000",
      fontFamily: "Arial",
      fontSize: 10,
      fontStyle: "bold"
    });
    group.add(this.station_id);

    var text = new Kinetic.Text({
      x: 5.5,
      y: 22.5,
      text: "Time:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 10
    });
    group.add(text);

    this.time = new Kinetic.Text({
      x: 68.5,
      y: 22.5,
      textFill: "#990000",
      fontFamily: "Arial",
      fontSize: 10,
      fontStyle: "bold"
    });
    group.add(this.time);

    var text = new Kinetic.Text({
      x: 5.5,
      y: 46.5,
      text: "wave ht:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 42,
      align: "right"
    });
    group.add(text);

    this.wave_ht = new Kinetic.Text({
      x: 50.5,
      y: 46.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.wave_ht);

    var text = new Kinetic.Text({
      x: 5.5,
      y: 59.5,
      text: "period:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 42,
      align: "right"
    });
    group.add(text);

    this.wave_per = new Kinetic.Text({
      x: 50.5,
      y: 59.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.wave_per);

    var text = new Kinetic.Text({
      x: 5.5,
      y: 72.5,
      text: "direction:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 42,
      align: "right"
    });
    group.add(text);

    this.wave_dir = new Kinetic.Text({
      x: 50.5,
      y: 72.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.wave_dir);

    var text = new Kinetic.Text({
      x: 5.5,
      y: 101.5,
      text: "swell ht:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 40,
      align: "right"
    });
    group.add(text);

    this.swell_ht = new Kinetic.Text({
      x: 50.5,
      y: 101.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.swell_ht);

    var text = new Kinetic.Text({
      x: 5.5,
      y: 114.5,
      text: "period:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 40,
      align: "right"
    });
    group.add(text);

    this.swell_per = new Kinetic.Text({
      x: 50.5,
      y: 114.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.swell_per);

    var text = new Kinetic.Text({
      x: 5.5,
      y: 127.5,
      text: "direction:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 40,
      align: "right"
    });
    group.add(text);

    this.swell_dir = new Kinetic.Text({
      x: 50.5,
      y: 127.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.swell_dir);

    var text = new Kinetic.Text({
      x: 98.5,
      y: 46.5,
      text: "wind dir:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 40,
      align: "right"
    });
    group.add(text);

    this.wind_dir = new Kinetic.Text({
      x: 141.5,
      y: 46.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.wind_dir);

    var text = new Kinetic.Text({
      x: 98.5,
      y: 59.5,
      text: "speed:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 40,
      align: "right"
    });
    group.add(text);

    this.wind_speed = new Kinetic.Text({
      x: 141.5,
      y: 59.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.wind_speed);

    var text = new Kinetic.Text({
      x: 98.5,
      y: 72.5,
      text: "gust:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 40,
      align: "right"
    });
    group.add(text);

    this.wind_gust = new Kinetic.Text({
      x: 141.5,
      y: 72.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.wind_gust);

    var text = new Kinetic.Text({
      x: 98.5,
      y: 101.5,
      text: "air tmp:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 40,
      align: "right"
    });
    group.add(text);

    this.air_temp = new Kinetic.Text({
      x: 141.5,
      y: 101.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.air_temp);

    var text = new Kinetic.Text({
      x: 98.5,
      y: 113.5,
      text: "dew pt:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 40,
      align: "right"
    });
    group.add(text);

    this.dew_pt = new Kinetic.Text({
      x: 141.5,
      y: 113.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.dew_pt);

    var text = new Kinetic.Text({
      x: 98.5,
      y: 126.5,
      text: "wtr tmp:",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      width: 40,
      align: "right"
    });
    group.add(text);

    this.wtr_temp = new Kinetic.Text({
      x: 141.5,
      y: 126.5,
      textFill: "#0066CC",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    group.add(this.wtr_temp);
  };

  BuoyDataPoints.prototype.updateDataBox = function(dataPoint) {
    this.station_id.setText(dataPoint.id);
    this.time.setText(dataPoint.time);
    this.wave_ht.setText(dataPoint.wave_ht);
    this.wave_per.setText(dataPoint.wave_per);
    this.wave_dir.setText(dataPoint.wave_dir);
    this.swell_ht.setText(dataPoint.swell_ht);
    this.swell_per.setText(dataPoint.swell_per);
    this.swell_dir.setText(dataPoint.swell_dir);
    this.wind_dir.setText(dataPoint.wind_dir);
    this.wind_speed.setText(dataPoint.wind_speed);
    this.wind_gust.setText(dataPoint.wind_gusts);
    this.air_temp.setText(dataPoint.air_temp);
    this.dew_pt.setText(dataPoint.dew_point);
    this.wtr_temp.setText(dataPoint.water_temp);
    this.layer.draw();
  };

  BuoyDataPoints.prototype.createSmallDataBox = function(dataPoint) {
    var group = new Kinetic.Group({
      x: (dataPoint.xbox - dataPoint.xcoord + 3.5),
      y: (dataPoint.ybox - dataPoint.ycoord + 4.5),
    });
    var rect = new Kinetic.Rect({
      stroke: "#FFFF00",
      strokeWidth: 1,
      fill: "rgba(256, 256, 256, 0.8)",
      width: 40,
      height: 35
    });
    group.add(rect);

    var text = new Kinetic.Text({
      x: 2.5,
      y: 3.5,
      width: 38,
      text: dataPoint.wave_ht,
      fontFamily: "Arial",
      fontSize: 8,
      textFill: "#000000"
    });
    group.add(text);
    text = new Kinetic.Text({
      x: 2.5,
      y: 14.5,
      width: 38,
      text: dataPoint.wave_per,
      fontFamily: "Arial",
      fontSize: 8,
      textFill: "#000000"
    });
    group.add(text);
    text = new Kinetic.Text({
      x: 2.5,
      y: 25.5,
      width: 36,
      height: 10,
      text: dataPoint.wind_dir + " " + dataPoint.wind_speed,
      fontFamily: "Arial",
      fontSize: 8,
      textFill: "#000000"
    });
    group.add(text);
    return group;
  };

  return BuoyDataPoints;
})();



var MapHierarchy = (function() {
  MapHierarchy.name = "MapHierarchy";

  var buttons = new Images({
    images: ["<%= asset_path('map-parent.png') %>",
      "<%= asset_path('map-sibling.png') %>",
      "<%= asset_path('map-children.png') %>"],
    collection: "buttons"
  });

  function MapHierarchy(options) {
    this.id = options.id;
    this.layer = options.layer;
    this.map = options.map;
    this.options = options;
    this.maptype = options.maptype;

    if (!buttons.fullyLoaded) {
      $(document).on("buttons:images:allLoaded.wavemaps", $.proxy(this.imageSuccess, this));
    }

    var url = "";
    switch(this.maptype){
      case "wavemaps":
        url = "<%= data_wave_maps_hierarchy_path :format => :xml %>";
        break;
      case "periodmaps":
        url = "<%= data_period_maps_hierarchy_path :format => :xml %>";
        break;
      case "windmaps":
        url = "<%= data_nearshorewind_maps_hierarchy_path :format => :xml %>";
        break;
      case "pressurewindmap":
        url = "<%= data_pressure_maps_hierarchy_path :format => :xml %>";
        break;
      case "surfacetempmap":
        url = "<%= data_sst_maps_hierarchy_path :format => :xml %>";
        break;
      case "buoydatamap":
        url = "<%= data_buoy_maps_path :format => :xml %>";
        break;
    }

    $.get(url, $.proxy(this.ajaxSuccess, this));
  };

  var bindNodes = function() {
    return {name: $(this).attr("name"), key: $(this).attr("key")};
  };

  MapHierarchy.prototype.ajaxSuccess = function(data) {
    this.data = data;
    if (buttons.fullyLoaded) {
      this.storeMapHierarchy(this.data);
    }
  };

  MapHierarchy.prototype.imageSuccess = function() {
    if (this.data) {
      this.storeMapHierarchy(this.data);
    }
  };

  MapHierarchy.prototype.storeMapHierarchy = function(data) {
    var mapNode = $(data).find("[key=" + this.map + "]:last");
    var parentNode = mapNode.parents().length > 0 ? mapNode.parent().map(bindNodes) : [];
    var siblingNodes = mapNode.siblings().map(bindNodes);
    var childNodes = mapNode.children().map(bindNodes);

    this.controlGroup = new Kinetic.Group({
      x: 0,
      y: 28
    });
    this.layer.add(this.controlGroup);
    var yoffset = 0;
    if (parentNode.length > 0 && this.maptype != "buoydatamap" && this.maptype != "surfacetmepmap" && parentNode[0].key != "nww3") {
      this.drawButtons("parent", parentNode, yoffset);
      yoffset += 21;
    }

    if (siblingNodes.length > 0) {
      this.drawButtons("siblings", siblingNodes, yoffset);
      yoffset += 21;
    }

    if (childNodes.length > 0) {
      this.drawButtons("children", childNodes, yoffset);
      yoffset += 21;
    }

    this.layer.draw();
  };

  MapHierarchy.prototype.drawButtons = function(type, nodes, yoffset) {
    var buttonGroup = new Kinetic.Group({
      y: yoffset
    });
    switch (type) {
      case "parent":
        var image = new Kinetic.Image({
          width: 20,
          height: 20,
          image: buttons.images[0]
        });
        buttonGroup.add(image);
        break;
      case "siblings":
        var image = new Kinetic.Image({
          width: 20,
          height: 20,
          image: buttons.images[1]
        });
        buttonGroup.add(image);
        break;
      case "children":
        var image = new Kinetic.Image({
          width: 20,
          height: 20,
          image: buttons.images[2]
        });
        buttonGroup.add(image);
        break
    }

    this.controlGroup.add(buttonGroup);

    var subMenuButtonsContainer = this.drawSubmenuButtons(nodes, yoffset);
    this.controlGroup.add(subMenuButtonsContainer);

    var showGroupFunction = this.createShowGroupFunction(subMenuButtonsContainer);
    buttonGroup.on("tap.wavemaps", showGroupFunction); 
    buttonGroup.on("mouseenter.wavemaps", showGroupFunction);
    // call a function that will create a timer to hide the submenu buttons
    buttonGroup.on("mouseleave.wavemaps", $.proxy(this.hideSubmenuButtonsTimer, this));
  };

  MapHierarchy.prototype.hideSubmenuButtonsTimer = function() {
    this.timer = setTimeout($.proxy(this.hideSubMenuButtons, this), 500);
  };

  MapHierarchy.prototype.hideSubMenuButtons = function() {
    var allSubMenuButtonsGroups = this.controlGroup.get(".subMenuButtonsContainer");
    for (var i = 0; i < allSubMenuButtonsGroups.length; i++) {
      allSubMenuButtonsGroups[i].hide();
    }
    this.layer.draw();
  };

  MapHierarchy.prototype.createShowGroupFunction = function(subMenuButtonsContainer) {
    var layer = this.layer;
    var controlGroup = this.controlGroup;
    var _this = this;
    return function() {
      clearTimeout(_this.timer);
      var allSubMenuButtonsGroups = controlGroup.get(".subMenuButtonsContainer");
      for (var i = 0; i < allSubMenuButtonsGroups.length; i++) {
        allSubMenuButtonsGroups[i].hide();
      }

      subMenuButtonsContainer.show();
      layer.draw();
    };
  };

  MapHierarchy.prototype.drawSubmenuButtons = function(items, yoffset) {
    var group = new Kinetic.Group({
      name: "subMenuButtonsContainer",
      x: 21,
      y: yoffset
    });

    var btnWidth = tempBtnWidth = 0;
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      tempBtnWidth = (Math.ceil(items[i].name.length * 6.6)) + 10;
      if (tempBtnWidth > btnWidth) {
        btnWidth = tempBtnWidth;
      }
    }

    for (i = 0; i < items.length; i++) {
      var buttonGroup = new Kinetic.Group({
        id: items[i].key,
        name: "subMenuButtonsGroup",
        y: i * 21
      });
      var rect = new Kinetic.Rect({
        name: items[i].key,
        width: btnWidth,
        height: 20,
        fill: "#0E4A74"
      });
      buttonGroup.add(rect);

      var text = new Kinetic.Text({
        name: items[i].key,
        x: 4,
        y: 7,
        width: btnWidth,
        text: items[i].name,
        textFill: "#FFFFFF",
        fontFamily: "Arial",
        fontSize: 9,
        fontStyle: "bold"
      });
      buttonGroup.add(text);
      buttonGroup.on("mouseenter.wavemaps", $.proxy(this.submenuRollover, this));
      buttonGroup.on("mouseleave.wavemaps", $.proxy(this.hideSubmenuButtonsTimer, this));
      buttonGroup.on("click.wavemaps tap.wavemaps", this.createChangeMapFunction(items[i].key));
      buttonGroup.on("mouseenter.wavemaps", MouseHandler.mouseenter);
      buttonGroup.on("mouseleave.wavemaps", MouseHandler.mouseleave);
      group.add(buttonGroup);
    }

    group.hide();

    return group;
  };

  MapHierarchy.prototype.createChangeMapFunction = function(key) {
    var options = this.options;
    var id = this.id;
    return function() {
      options.map = key;
      options.stage.reset();
      $("#" + id).off(".wavemaps");
      new WaveMap(options);
    } 
  };

  MapHierarchy.prototype.submenuRollover = function(event) {
    clearTimeout(this.timer);
    var name = event.shape.getName();

    var allSubMenuButtonsGroups = this.controlGroup.get(".subMenuButtonsGroup");
    for (var i = 0; i < allSubMenuButtonsGroups.length; i++) {
      var rect = allSubMenuButtonsGroups[i].getChildren()[0];
      rect.setFill("#0E4A74");
    }

    var subMenuButtonGroup = this.controlGroup.get("#" + name)[0];
    var rect = subMenuButtonGroup.getChildren()[0];
    rect.setFill("#CCCCCC");

    this.layer.draw();
  };

  return MapHierarchy;
})();

var HotButtonLinks = (function() {
  HotButtonLinks.name = "HotButtonLinks";

  function HotButtonLinks(options) {
    this.id = options.id;
    this.layer = options.layer;
    this.map = options.map;
    this.options = options;

    this.drawInitial();
  }

  HotButtonLinks.prototype.drawInitial = function() {
    if (this.map == 'wna_ec' || this.map == 'nah_ec') {
      this.createButton(37, 82, 100, 86.5, 11, "wna_midat", "Mid Atlantic");
      this.createButton(135, 21, 91, 70, 11, "wna_ne", "Northeast");
      this.createButton(15, 164, 106, 72, 11, "wna_se", "Southeast");
      this.createButton(5, 236, 104, 89, 11, "wna_efl", "East Florida");
    } else if (this.map == "wna_gulf" || this.map == "nah_gulf") {
      this.createButton(18, 26, 134.5, 134.5, 16, "wna_tx", "Texas");
      this.createButton(328, 9, 179, 179, 16, "wna_wfl", "West Florida");
    } else if (this.map == "wna_carib" || this.map == "nah_carib") {
      this.createButton(153, 142, 190, 84, 12, "car_greater", "Greater Antilles");
      this.createButton(346, 193, 102, 145, 12, "car_lesser", "Lesser\nAntilles");
      this.createButton(207, 255, 140, 70, 12, "car_leeward", "Leeward\nAntilles");
    } else if (this.map == "enp_wc") {
      this.createButton(314, 48, 116, 95, 11, "enp_nw", "Northwest");
      this.createButton(330, 143, 129, 111, 11, "enp_norcal", "Northern\nCalifornia");
      this.createButton(362, 256, 151, 27, 11, "enp_socal", "Southern California", {cornerRadius: 6});
    } else if(this.map == "nww3_na") {
      this.createButton(82, 136, 127, 84, 11, "wna_ec", "US East Coast", {cornerRadius: 6});
      this.createButton(5, 176, 78, 55, 11, "wna_gulf", "Gulf of\nMexico", {cornerRadius: 6});
      this.createButton(91, 215, 129, 64, 11, "wna_carib", "Caribbean\nIslands", {cornerRadius: 6});
    } else if(this.map == "nww3_np") {
      this.createButton(369, 78, 118, 59, 11, "enp_wc", "US West Coast", {cornerRadius: 6});
      this.createButton(226, 134, 116, 97, 11, "enp_haw", "Hawaiian\nIslands", {cornerRadius: 6});
      this.createButton(375, 141, 130, 90, 11, "enp_mex", "Mexico", {cornerRadius: 8});
    } else if (this.map == "nww3") {
      this.createButton(5, 125, 118, 58, 12, "nww3_np", "North Pacific", {cornerRadius: 6});
      this.createButton(12, 192, 137, 84, 12, "nww3_sp", "South Pacific");
      this.createButton(152, 117, 105, 55, 12, "nww3_na", "North Atlantic", {cornerRadius: 8});
      this.createButton(193, 201, 120, 61, 12, "glo_sa", "South Atlantic");
      this.createButton(313, 170, 143, 73, 12, "glo_ind", "Indian Ocean", {cornerRadius: 8});
    } else if (this.map == "glo_ind") {
      this.createButton(320, 170, 159, 100, 12, "glo_au", "Australia", {cornerRadius: 8});
    }
    this.layer.draw();
  };

  HotButtonLinks.prototype.createButton =
  function(x, y, width, height, fontSize, id, labelText, options) {
    options = options || {};
    var cornerRadius = options.cornerRadius || 10;
    var buttonGroup = new Kinetic.Group({
      x: x,
      y: y,
      id: id
    });
    var rect = new Kinetic.Rect({
      name: id,
      width: width,
      height: height,
      fill: "rgba(256, 256, 256, 0.61)",
      cornerRadius: cornerRadius
    });
    buttonGroup.add(rect);
    var text = new Kinetic.Text({
      name: id,
      x: rect.getWidth() / 2,
      y: rect.getHeight() / 2,
      text: labelText,
      textFill: "#000000",
      fontFamily: "Trebuchet MS",
      fontSize: fontSize,
      align: 'center'
    });
    if (labelText.indexOf("\n") > -1) {
      text.setLineHeight(1.8);
    }
    text.setOffset({
      x: text.getWidth() / 2,
      y: text.getHeight() / 2
    });
    buttonGroup.add(text);
    buttonGroup.setOpacity(0);
    buttonGroup.on("mouseenter.wavemaps", $.proxy(this.showButton, this));
    buttonGroup.on("mouseleave.wavemaps", $.proxy(this.hideButton, this));
    buttonGroup.on("click.wavemaps tap.wavemaps", this.createClickButtonFunction(id));
    buttonGroup.on("mouseenter.wavemaps", MouseHandler.mouseenter);
    buttonGroup.on("mouseleave.wavemaps", MouseHandler.mouseleave);
    this.layer.add(buttonGroup);
  };

  HotButtonLinks.prototype.showButton = function(event) {
    var shape = event.shape;
    var group = shape.getParent();
    group.setOpacity(1);
    this.layer.draw();
  };

  HotButtonLinks.prototype.hideButton = function(event) {
    var shape = event.shape;
    var group = shape.getParent();
    group.setOpacity(0);
    this.layer.draw();
  };

  HotButtonLinks.prototype.createClickButtonFunction = function(key) {
    var options = this.options;
    var id = this.id;
    return function() {
      options.map = key;
      options.stage.reset();
      $("#" + id).off(".wavemaps");
      new WaveMap(options);
    } 
  };

  return HotButtonLinks;
})();

var TimeBar = (function() {
  TimeBar.name = "TimeBar";

  function TimeBar(options) {
    this.id = options.id;
    this.layer = options.layer;
    this.times = options.times;

    this.drawInitial();
  }

  TimeBar.prototype.drawInitial = function() {
    var height = (this.times.length * 11) + 7;
    var rect = new Kinetic.Rect({
      x: 512.5,
      y: -0.5,
      width: 29,
      height: height,
      fill: "rgba(255, 255, 255, 0.6)",
      stroke: "#177496",
      strokeWidth: 1
    });
    this.layer.add(rect);

    this.timeNavGroup = new Kinetic.Group({
      x: 512,
      y: 5
    });
    var id = this.id;
    // Draw times buttons
    for (var i = 0; i < this.times.length; i++) {
      var text = new Kinetic.Text({
        id: this.times[i].hour,
        text: this.times[i].hourString,
        textFill: "#000000",
        align: "right",
        width: 23,
        x: 0,
        y: i * 11,
        fontSize: 8,
        fontFamily: "Arial",
        fontStyle: "bold"
      });
      this.timeNavGroup.add(text);
      text.on("mousedown.wavemaps", this.updateTrigger(i));
    }

    // Yellow highlight box
    this.yellowBox = new Kinetic.Rect({
      x: 1,
      y: -2,
      width: 28,
      height: 10,
      fill: "rgba(254, 254, 0, 0.6)"
    });
    this.timeNavGroup.add(this.yellowBox);
    this.yellowBox.setZIndex(0);
    this.layer.add(this.timeNavGroup);

    this.dragBox = new Kinetic.Rect({
      x: 2,
      y: -2,
      width: 28,
      height: 10,
      draggable: true,
      dragBoundFunc: function(pos) {
        var newY;
        if (pos.y < 0) {
          newY = 0;
        } else if (pos.y > (height - 10)) {
          newY = height - 10;
        } else {
          newY = pos.y;
        }
        return {
          x: this.getAbsolutePosition().x,
          y: newY
        }
      }
    });
    this.dragBox.hide();
    var _this = this;
    this.dragBox.on("dragmove.wavemaps", $.proxy(this.dragMoveHandler, this));
    this.dragBox.on("dragend.wavemaps", $.proxy(this.dragEndHandler, this));
    this.dragBox.on("mouseup.wavemaps", function(event) {
      this.hide();
    });
    this.timeNavGroup.add(this.dragBox);

    this.stampText = new Kinetic.Text({
      text: this.times[0].stamp,
      textFill: "#000000",
      fontFamily: "Arial",
      fontStyle: "bold",
      x: 312,
      y: 10,
      width: 194,
      align: "right",
      fontSize: 9,
    });
    this.layer.add(this.stampText);

    this.layer.draw();

    $("#" + this.id).on("map:update.wavemaps", $.proxy(this.update, this));
    
  };

  TimeBar.prototype.updateTrigger = function(index) {
    var id = this.id;
    var _this = this;
    return function(event) {
      $("#" + id).trigger("timebar:update", [index]);
      var position = event.shape.getPosition();
      _this.dragBox.setPosition({x: position.x + 1, y: position.y - 2});
      _this.dragBox.show();
      _this.dragBox.simulate('mousedown');
      _this.dragBox.simulate('dragstart');
    };
  };

  TimeBar.prototype.dragMoveHandler = function(event) {
    var position = event.shape.getPosition();
    this.yellowBox.setPosition(position);

    var index = Math.round((position.y + 2) / 11);

    $("#" + this.id).trigger("timebar:update", [index]);
  };

  TimeBar.prototype.dragEndHandler = function(event) {
    this.dragBox.hide();
    this.updateYellowBox(this.selectedTime);
  };

  TimeBar.prototype.update = function(event, time) {
    this.selectedTime = time;
    this.stampText.setText(time.stamp);
    if (!this.dragBox.isVisible()) {
      this.updateYellowBox(time);
    }
  };

  TimeBar.prototype.updateYellowBox = function(time) {
    var hourText = this.timeNavGroup.get("#" + time.hour)[0];
    this.yellowBox.setY(hourText.getY() - 2);
    this.layer.draw();
  };

  return TimeBar;
})();

var ProgressBar = (function() {
  ProgressBar.name = "ProgressBar";

  function ProgressBar(options) {
    this.layer = options.layer;
    this.id = options.id;
    this.numberOfImages = options.numberOfImages;
    this.imageLoader = options.imageLoader;
    this.collection = this.imageLoader.collection;

    this.drawInitial();

    $("#" + this.id).on(this.collection + ":images:success.wavemaps", $.proxy(this.update, this));
  }

  ProgressBar.prototype.update = function(event, data, target) {
    var count = data.count;

    var lengthRatio = count / this.numberOfImages;

    var basePoints = this.baseLine.getPoints();
    var maxLength = basePoints[1].x - basePoints[0].x;

    var progressPoints = this.progressLine.getPoints();
    var progressX = progressPoints[0].x;

    var length = maxLength * lengthRatio;

    progressPoints[1].x = progressX + length;

    this.updateText.setText("MAP " + count + " OF " + this.numberOfImages + " LOADED");

    this.layer.draw();
  };

  ProgressBar.prototype.drawInitial = function() {
    this.barGroup = new Kinetic.Group();
    this.baseLine = new Kinetic.Line({
      points: [401.5, 33.5, 496.5, 33.5],
      strokeWidth: 5,
      stroke: "#000",
      lineCap: 'round',
    });
    this.barGroup.add(this.baseLine);

    this.progressLine = new Kinetic.Line({
      points: [401.5, 33.5, 402.5, 33.5],
      strokeWidth: 3,
      stroke: "#00FF33",
      lineCap: 'round',
    });
    this.barGroup.add(this.progressLine);

    this.updateText = new Kinetic.Text({
      x: 391,
      y: 41,
      text: "MAP 0 OF " + this.numberOfImages + " LOADED",
      textFill: "#000000",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold",
      width: 120,
      align: "center",
    });
    this.barGroup.add(this.updateText);
    this.layer.add(this.barGroup);
    this.layer.draw();
  };

  ProgressBar.prototype.hide = function() {
    this.barGroup.hide();
    this.layer.draw();
  };

  return ProgressBar;
})();

var PlayControls = (function() {
  PlayControls.name = "PlayControls";

  function PlayControls(options) {
    this.id = options.id;
    this.layer = options.layer;

    this.drawInitial();
  }

  PlayControls.prototype.drawInitial = function() {
    var group = new Kinetic.Group({
      x: 449,
      y: 30
    });

    var leftButtonGroup = new Kinetic.Group();
    var backgroundRect = new Kinetic.Rect({
      x: 0.5,
      y: 0.5,
      width: 16,
      height: 17,
      strokeWidth: 1,
      stroke: "#177496",
      fill: "rgba(255, 255, 255, 0.6)"
    });
    leftButtonGroup.add(backgroundRect);

    var poly = new Kinetic.Polygon({
      points: [3, 9, 10, 4, 10, 6, 14, 4, 14, 14, 10, 12, 10, 14],
      fill: "#0E4A74"
    });
    leftButtonGroup.add(poly);
    var id = this.id;
    leftButtonGroup.on("click.wavemaps tap.wavemaps", function() {
      $("#" + id).trigger("playcontrol:prev");
    });
    leftButtonGroup.on("mouseenter.wavemaps", MouseHandler.mouseenter);
    leftButtonGroup.on("mouseleave.wavemaps", MouseHandler.mouseleave);

    group.add(leftButtonGroup);

    var rightButtonGroup = new Kinetic.Group({ x: 43 });
    backgroundRect = backgroundRect.clone();
    rightButtonGroup.add(backgroundRect);

    poly = poly.clone();
    poly.setOffset(17, 18);
    poly.rotateDeg(180);
    rightButtonGroup.add(poly);
    rightButtonGroup.on("click.wavemaps tap.wavemaps", function() {
      $("#" + id).trigger("playcontrol:next");
    });
    rightButtonGroup.on("mouseenter.wavemaps", MouseHandler.mouseenter);
    rightButtonGroup.on("mouseleave.wavemaps", MouseHandler.mouseleave);

    group.add(rightButtonGroup);

    var playButtonGroup = new Kinetic.Group({ x: 19 });
    // background rect
    backgroundRect = backgroundRect.clone();
    backgroundRect.setWidth(21);
    playButtonGroup.add(backgroundRect);

    this.stopButton = new Kinetic.Rect({
      x: 7,
      y: 5,
      width: 8,
      height: 8,
      fill: "#0E4A74"
    });
    playButtonGroup.add(this.stopButton);
    this.stopButton.hide();
    this.playButton = new Kinetic.Polygon({
      points: [5, 4, 18, 9, 5, 14],
      fill: "#0E4A74"
    });
    playButtonGroup.add(this.playButton);

    playButtonGroup.on("click.wavemaps tap.wavemaps", $.proxy(this.playClickHandler, this));
    playButtonGroup.on("mouseenter.wavemaps", MouseHandler.mouseenter);
    playButtonGroup.on("mouseleave.wavemaps", MouseHandler.mouseleave);

    group.add(playButtonGroup);

    this.layer.add(group);
    this.layer.draw();
  };

  PlayControls.prototype.playClickHandler = function(event) {
    if (this.playButton.isVisible()) {
      $("#" + this.id).trigger("playcontrol:play");
      this.playButton.hide();
      this.stopButton.show();
    } else {
      $("#" + this.id).trigger("playcontrol:stop");
      this.playButton.show();
      this.stopButton.hide();
    }
    this.layer.draw();
  };

  return PlayControls;
})();

var ScalePopup = (function() {
  ScalePopup.name = "ScalePopup";

  var heightScale = {
    meters: {image: "<%= asset_path("scale-meters.png") %>",
      x: 13
    },
    feet: {image: "<%= asset_path("scale-feet.png") %>",
      x: 13
    }
  };

  var timeSteps = {
    seconds: {image: "<%= asset_path("scale-seconds.png") %>",
        x: 13
      }
    };

  var speedSteps = {
    knots: {image: "<%= asset_path("scale-knots.png") %>",
      x: 13
    }
  };

  var tempScale = {
    fahrenheit: {image: "<%= asset_path("scale-fahrenheit.png") %>",
      x: 13
    },
    celcius: {image: "<%= asset_path("scale-celcius.png") %>",
      x: 13
    }
  };

  var scaleImages = new Images({
    images: ["<%= asset_path("scale-fahrenheit.png") %>",
      "<%= asset_path("scale-celcius.png") %>",
      "<%= asset_path("scale-meters.png") %>",
      "<%= asset_path("scale-feet.png") %>",
      "<%= asset_path("scale-seconds.png") %>",
      "<%= asset_path("scale-knots.png") %>"
    ],
    collection: "scales"
  });

  var imagesObj = {};
  $(document).on("scales:images:success", function(event, data, target) {
    imagesObj[data.url] = target;
  });

  function ScalePopup(options) {
    this.layer = options.layer;
    this.mapType = options.mapType;

    switch (this.mapType) {
      case "wavemaps":
        this.scale = heightScale;
        this.units = "feet";
        this.alternateUnits = "meters";
        break;
      case "periodmaps":
        this.scale = timeSteps;
        this.units = "seconds";
        break;
      case "windmaps":
        this.scale = speedSteps;
        this.units = "knots";
        break;
      case "surfacetempmap":
        this.scale = tempScale;
        this.units = "fahrenheit";
        this.alternateUnits = "celcius";
        break;
    }

    if (this.scale) {
      if (!scaleImages.fullyLoaded) {
        $(document).on("scales:images:allLoaded", $.proxy(this.drawInitial, this));
      } else {
        this.drawInitial();
      }
    }

  }

  ScalePopup.prototype.drawInitial = function() {
    this.scaleGroup = new Kinetic.Group({
      x: 0,
      y: 43
    });
    var shape = new Kinetic.Shape({
      drawFunc: function(canvas) {
        var context = canvas.getContext();
        context.beginPath();
        context.moveTo(11, 349);
        context.lineTo(11, 342);
        context.arcTo(11, 338, 15.5, 338, 5);
        context.lineTo(65, 338);
        context.arcTo(70, 337.5, 70, 342, 5);
        context.lineTo(70, 349);
        context.closePath();
        canvas.fill(this);
      },
      fill: "#FFFFFF"
    });
    this.scaleGroup.add(shape);

    shape = new Kinetic.Shape({
      drawFunc: function(canvas) {
        var context = canvas.getContext();
        context.beginPath();
        context.moveTo(0, 348.5);
        context.lineTo(10.5, 348.5);
        context.lineTo(10.5, 342);
        context.arcTo(10.5, 337.5, 15.5, 337.5, 5);
        context.lineTo(65, 337.5);
        context.arcTo(70.5, 337.5, 70.5, 342, 5);
        context.lineTo(70.5, 348.5);
        context.lineTo(512, 348.5);
        canvas.stroke(this);
      },
      stroke: "#177496",
      strokeWidth: 1
    });
    shape.on("click.wavemaps tap.wavemaps", $.proxy(this.toggleScale, this));
    shape.on("mouseenter.wavemaps", MouseHandler.mouseenter);
    shape.on("mouseleave.wavemaps", MouseHandler.mouseleave);
    this.scaleGroup.add(shape);

    var text = new Kinetic.Text({
      x: 22,
      y: 340,
      textFill: "#000000",
      text: "SCALE",
      fontFamily: "Arial",
      fontSize: 8,
      fontStyle: "bold"
    });
    text.on("click.wavemaps tap.wavemaps", $.proxy(this.toggleScale, this));
    text.on("mouseenter.wavemaps", MouseHandler.mouseenter);
    text.on("mouseleave.wavemaps", MouseHandler.mouseleave);
    this.scaleGroup.add(text);

    var rect = new Kinetic.Rect({
      x: 0,
      y: 348,
      fill: "rgba(255, 255, 255, 0.6)",
      width: 512,
      height: 43
    });
    this.scaleGroup.add(rect);

    var scale = this.scale, units = this.units;

    /*
    if (this.mapType == "surfacetempmap") {
    */
    var unitImage = new Kinetic.Image({
      id: "units",
      x: scale[this.units].x,
      y: 360,
      image: imagesObj[scale[this.units].image]
    });
    this.scaleGroup.add(unitImage);

    if (this.alternateUnits) {
      unitImage = new Kinetic.Image({
        id: "alternateUnits",
        x: scale[this.alternateUnits].x,
        y: 360,
        image: imagesObj[scale[this.alternateUnits].image]
      });
      unitImage.hide();
      this.scaleGroup.add(unitImage);
    }

    /*
    } else {
      for (var i = 0; i < steps.length; i++) {
        var rect = new Kinetic.Rect({
          x: (25 * i) + 13,
          y: 360,
          fill: steps[i].color,
          width: 25,
          height: 16
        });
        this.scaleGroup.add(rect);

        var text = new Kinetic.Text({
          name: "step",
          x: (25 * i) + 2,
          y: 378,
          textFill: "#000000",
          text: steps[i][scale],
          fontFamily: "Arial",
          fontStyle: "bold",
          fontSize: 10,
          width: 24,
          align: "center",
        });
        this.scaleGroup.add(text);
      }
    }
    */

    this.scaleTypeButton = new Kinetic.Text({
      x: 456,
      y: 378,
      textFill: "#000000",
      text: units,
      fontFamily: "Arial",
      fontStyle: "bold",
      fontSize: 8,
      width: 53,
      align: "right"
    });
    if (this.alternateUnits) {
      this.scaleTypeButton.on("click.wavemaps tap.wavemaps", $.proxy(this.changeScale, this));
      this.scaleTypeButton.on("mouseenter.wavemaps", MouseHandler.mouseenter);
      this.scaleTypeButton.on("mouseleave.wavemaps", MouseHandler.mouseleave);
    }
    this.scaleGroup.add(this.scaleTypeButton);

    this.layer.add(this.scaleGroup);
  };

  ScalePopup.prototype.changeScale =
  function() {
    var text = this.scaleTypeButton.getText();
    var celcGroup = this.scaleGroup.get("#alternateUnits")[0];
    var fahrGroup = this.scaleGroup.get("#units")[0];
    if (text == this.units){
      this.scaleTypeButton.setText(this.alternateUnits);
      celcGroup.show();
      fahrGroup.hide();
    } else if (text == this.alternateUnits) {
      this.scaleTypeButton.setText(this.units);
      fahrGroup.show();
      celcGroup.hide();
    }

    this.layer.draw();
  };

  ScalePopup.prototype.toggleScale = function() {
    var position = this.scaleGroup.getPosition();

    if (position.y == 0) {
      position.y = 43
    } else if (position.y == 43) {
      position.y = 0
    }

    this.scaleGroup.setPosition(position);

    this.layer.draw();
  };

  return ScalePopup;
})();

var WaveMap = (function() {
  WaveMap.name = "WaveMap";

  // constructor
  function WaveMap(options) {
    this.id = options.id;
    this.loc = options.loc;
    this.title = options.title;
    this.mapType = options.maptype;
    this.map = options.map;
    this.defaultBuoy = options.defaultBuoy;
    this.stage = options.stage || new Kinetic.Stage({container: options.id, width: 541, height: 391});

    this.mapLayer = new Kinetic.Layer();
    this.dataLayer = new Kinetic.Layer();
    this.infoLayer = new Kinetic.Layer();

    this.stage.add(this.mapLayer);
    this.stage.add(this.dataLayer);
    this.stage.add(this.infoLayer);

    if (this.mapType != "surfacetempmap" && this.mapType != "buoydatamap") {
      $("#" + this.id).on("timesLoaded.wavemaps", $.proxy(this.handleLoadedTimes, this));
      this.times = new Times({
        id: this.id,
        timezone: options.timezone,
        map: options.map,
        maptype: options.maptype
      });
    } else if (this.mapType == "surfacetempmap") {
      $("#" + this.id).on("waves:images:success.wavemaps", $.proxy(this.loadMap, this));
      var imgurls = ["http://www.swellinfo.com/imgs/sst_graphs/" + this.map + "_sst.png"];
      this.deepWaterWaves = new Images({
        id: this.id,
        images: imgurls,
        collection: "waves"
      });
    } else if (this.mapType == "buoydatamap") {
      $("#" + this.id).on("waves:images:success.wavemaps", $.proxy(this.loadMap, this));
      var imgurls = ["http://www.swellinfo.com/imgs/buoys/" + this.map + "buoys.png"];
      this.deepWaterWaves = new Images({
        id: this.id,
        images: imgurls,
        collection: "waves"
      });
    }


    options.stage = this.stage;
    options.layer = this.infoLayer;
    new MapHierarchy(options);

    if (this.mapType == "wavemaps") {
      new HotButtonLinks(options);
      $("#" + this.id).on("forecastLoaded.wavemaps", $.proxy(this.handleLoadedForecast, this));
      this.forecast = new Forecast({id: this.id, map: this.map});
    }

    if (this.mapType == "buoydatamap") {
      $("#" + this.id).on("buoyDataLoaded.wavemaps", $.proxy(this.handleLoadedBuoyData, this));
      this.buoyData = new BuoyData({id: this.id, map: this.map});
    }

    this.drawInfoLayer();
  }

  WaveMap.prototype.drawInfoLayer = function() {
    // Title background Rectangle
    var width = this.mapType == "surfacetempmap" || this.mapType == "buoydatamap" ? 541 : 512;
    var rect = new Kinetic.Rect({
      x: 0,
      y: 0,
      fill: "rgba(255, 255, 255, 0.6)",
      width: width,
      height: 27,
    });
    this.infoLayer.add(rect);

    var text = new Kinetic.Text({
      x: 8,
      y: 8,
      text: this.title,
      textFill: "#0E4A74",
      fontSize: 12,
      fontFamily: "Arial",
      fontStyle: 'italic bold',
    });
    this.infoLayer.add(text);

    this.infoLayer.draw();

    new ScalePopup({layer: this.infoLayer, mapType: this.mapType});
  };

  WaveMap.prototype.handleLoadedTimes = function(event, times) {
    this.timesBar = new TimeBar({id: this.id, layer: this.infoLayer, times: times});

    $("#" + this.id).on("timebar:update.wavemaps", $.proxy(this.timeBarUpdate, this));

    var mapPath, pathSuffix = imgSuffix = ""; 
    switch (this.mapType) {
      case "wavemaps":
        mapPath = "/wave_maps/";
        break;
      case "periodmaps":
        mapPath = "/pergraphs/";
        imgSuffix = "_per";
        break;
      case "windmaps":
        mapPath = "/nearshorewind/";
        pathSuffix = imgSuffix = "_wind";
        break;
      case "pressurewindmap":
        mapPath = "/pressure/";
        pathSuffix = imgSuffix = "_pressure";
        break;
    }

    var imgurls = [];
    var map = this.map;
    for (var i = 0; i < times.length; i++) {
      var number = times[i].hourString;
      imgurls.push("http://www.swellinfo.com/imgs" + mapPath + map + pathSuffix + "/" + map + imgSuffix + number + ".png");
    }
    $("#" + this.id).on("waves:images:success.wavemaps", $.proxy(this.loadMap, this));
    $("#" + this.id).on("waves:images:allLoaded.wavemaps", $.proxy(this.showControlButtons, this));
    this.deepWaterWaves = new Images({
      id: this.id,
      images: imgurls,
      collection: "waves"
    });

    this.progressBar = new ProgressBar({
      id: this.id,
      layer: this.infoLayer,
      imageLoader: this.deepWaterWaves,
      numberOfImages: imgurls.length
    });
  };

  WaveMap.prototype.handleLoadedForecast = function(event, forecast) {
    this.forecastDisplay = new ForecastPoints({
      id: this.id, 
      layer: this.dataLayer,
      forecastPoints: forecast,
      loc: this.loc
    });
  };

  WaveMap.prototype.handleLoadedBuoyData = function(event, buoyData) {
    this.buoyDataDisplay = new BuoyDataPoints({
      id: this.id,
      layer: this.dataLayer,
      buoyDataPoints: buoyData,
      map: this.map,
      defaultBuoy: this.defaultBuoy
    });
  };

  WaveMap.prototype.timeBarUpdate = function(event, index) {
    var frameNum = this.animationData.frameNum;
    this.animationData.frameNumOffset = index - frameNum;
    this.updateMap();
  };

  WaveMap.prototype.loadMap = function(event, data, target) {
    if (data.id == 0) {
      var image = new Kinetic.Image({
        id: "mapimage",
        image: target,
        x: 0,
        y: 0
      });
      this.mapLayer.add(image);
      this.mapLayer.draw();
    }
  };

  WaveMap.prototype.showControlButtons = function() {
    this.progressBar.hide();

    this.controls = new PlayControls({id: this.id, layer: this.infoLayer});

    this.animationData = {
      frameNum: 0,
      frameNumOffset: 0
    };

    $("#" + this.id).on("playcontrol:play.wavemaps", $.proxy(this.startAnimation, this));
    $("#" + this.id).on("playcontrol:stop.wavemaps", $.proxy(this.stopAnimation, this));
    $("#" + this.id).on("playcontrol:prev.wavemaps", $.proxy(this.previousMap, this));
    $("#" + this.id).on("playcontrol:next.wavemaps", $.proxy(this.nextMap, this));
  };

  WaveMap.mod = function(i, n) {
    return ((i % n) + n) % n;
  };

  WaveMap.prototype.previousMap = function() {
    this.animationData.frameNumOffset--;
    if (!Kinetic.Animation.animRunning) {
      this.updateMap();
    }
  };

  WaveMap.prototype.nextMap = function() {
    this.animationData.frameNumOffset++;
    if (!Kinetic.Animation.animRunning) {
      this.updateMap();
    }
  };

  WaveMap.prototype.updateMap = function() {
    var image = this.mapLayer.get("#mapimage")[0];
    var frame = WaveMap.mod(this.animationData.frameNum + this.animationData.frameNumOffset, this.deepWaterWaves.images.length);
    image.setImage(this.deepWaterWaves.images[frame]);
    $("#" + this.id).trigger("map:update", [this.times.times[frame]]);
    this.mapLayer.draw();
  };

  WaveMap.prototype.startAnimation = function() {
    if (!this.animation) {
      var image = this.mapLayer.get("#mapimage")[0];

      var fps = 4;
      var animImages = this.deepWaterWaves.images;
      var times = this.times.times;
      var id = this.id;
      var animationData = this.animationData;
      this.animation = new Kinetic.Animation(function(frame) {
        animationData.frameNum = (Math.floor(frame.time / (1000 / fps)) % animImages.length);

        var frame = WaveMap.mod(animationData.frameNum + animationData.frameNumOffset, animImages.length);

        image.setImage(animImages[frame]);
        $("#" + id).trigger("map:update", [times[frame]]);
      }, this.mapLayer);

      this.animation.start();
    } else {
      this.animation.start();
    }
  };

  WaveMap.prototype.stopAnimation = function() {
    this.animation.stop();
  };

  return WaveMap;
})();

$(function() {
  var canvas2DSupported = !!window.CanvasRenderingContext2D;

  var mapData ={
    buoydata: {
      id: "buoydata",
      title: "BUOY DATA",
      timezone: "ET",
      map: "wna_ne",
      maptype: "buoydatamap",
      defaultBuoy: "44065"
    },
    surfacetemp: {
      id: "surfacetemp",
      title: "SEA SURFACE TEMPERATURE",
      timezone: "ET",
      map: "wna_midat",
      maptype: "surfacetempmap",
    },
    waveheights: {
      id: "waveheights",
      title: "DEEP WATER WAVES",
      timezone: "ET",
      map: "wna_midat",
      maptype: "wavemaps",
      loc: "ocean-city-maryland"
    },
    waveperiods: {
      id: "waveperiods",
      title: "Mean Wave Periods",
      timezone: "ET",
      map: "wna_ec",
      maptype: "periodmaps"
    },
    nearshorewind: {
      id: "nearshorewind",
      title: "Near Shore Winds",
      timezone: "ET",
      map: "wna_nj",
      maptype: "windmaps"
    },
    pressurewind: {
      id: "pressurewind",
      title: "PRESSURE / WIND MAP",
      timezone: "ET",
      map: "wna_ec",
      maptype: "pressurewindmap"
    }
  };
  var mapObjects = {};
  $("#mapmenu a").on("click", function(event) {
    var id = $(this).attr("id");
    id = id.substring(0, id.length - 4);

    var mapObject = mapObjects[id];
    if (mapObject) {
    } else {
      mapObjects[id] = new WaveMap(mapData[id]);
    }

    $("#mapdisplay .map").hide();
    $("#" + id).show();

    event.preventDefault();
  });

  if ($("#waveheights").length > 0 && canvas2DSupported) {
    mapObjects["waveheights"] = new WaveMap({
      id: "waveheights",
      title: "DEEP WATER WAVES",
      timezone: "ET",
      map: "wna_midat",
      maptype: "wavemaps",
      loc: "ocean-city-maryland"
    });
  }
});
